#+TITLE: Emacs Configuration
#+AUTHOR: Tim Julian WÃ¶rner

* Basics

** Package Management
    First, adding in the MELPA repository:
    #+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)
    #+end_src

    Making sure that =use-package= is loaded:
    #+begin_src emacs-lisp
(when (not (package-installed-p 'use-package))
  (package-refresh-contents)
  (package-install 'use-package))
    #+end_src

** Backup File Management
   I don't really like my directories to be cluttered with a lot of
   backup files, so I am using the =.saves=-folder within my home
   directory to store them.
   #+begin_src emacs-lisp
(setq backup-directory-alist `(("." . "~/.saves")))
   #+end_src

** Miscellaneous
   The following command disables the Emacs toolbar.
   #+begin_src emacs-lisp
(tool-bar-mode -1)
   #+end_src

   Disabling the "beep" sound entirely:
   #+begin_src emacs-lisp
(setq ring-bell-function 'ignore)
   #+end_src

   Enabling visualization of matching parentheses:
   #+begin_src emacs-lisp
(show-paren-mode 1)
   #+end_src

* Theme
  Use the =adwaita= color scheme:
  #+begin_src emacs-lisp
(load-theme 'adwaita)
  #+end_src

* Magit
  The following command updates the Magit status buffer automatically
  as soon as a buffer inside the respective repository is saved.
  #+begin_src emacs-lisp
(with-eval-after-load 'magit-mode
  (add-hook 'after-save-hook 'magit-after-save-refresh-status t))
  #+end_src

* Org-Mode

** Org Capture Templates
   I am using Org-Mode for writing my website using the =hugo= static
   website generator.  This is a simple template for different types
   of posts (currently only SICP exercises).  This takes as its input
   the SICP chapter and exercise numbers, and then sets up the caption
   and metadata automatically.

   First, some variables to hold the SICP chapter and exercise numbers
   as well as the current date in the correct format, then our capture
   templates.  I am using a wrapper function for =org-capture= so that
   the variables can be set on every function call.
   
   #+begin_src emacs-lisp
(defun my/org-capture-hugo ()
  "org-capture override for SICP blog posts"
  (interactive)
  (setq org-capture-sicp-chapter (read-string "SICP chapter number: "))
  (setq org-capture-sicp-exercise (read-string "SICP exercise number: "))
  (setq org-capture-sicp-current-date (format-time-string "%Y-%m-%d"))
  (setq org-capture-templates
        `(("s" "SICP" entry (file+headline
			     "~/Documents/homepage/posts.org"
			     ,(format "SICP Series Part %s" org-capture-sicp-chapter))
	   ,(format "** SICP Exercise %s.%s :@sicp:\n\
   :PROPERTIES:\n\
   :EXPORT_DATE: %s\n\
   :EXPORT_FILE_NAME: %s\n\
   :END:\n\
****\  Question\n\
****\  Answer\n"
		    org-capture-sicp-chapter
		    org-capture-sicp-exercise
		    org-capture-sicp-current-date
		    org-capture-sicp-exercise))))
  (org-capture))
   #+end_src

** Formatting
   Preserve leading whitespace characters.  This prevents messed up
   whitespace at the beginning of lines within a code block.
   #+begin_src emacs-lisp
(setq org-src-preserve-indentation t)
   #+end_src

   Setting up =autofill= for all Org-Mode files.  This automatically
   wraps lines within a paragraph to not surpass a certain maximum
   number of columns. The default number of maximum columns in Emacs
   is 70, but I prefer 80.
   #+begin_src emacs-lisp
(add-hook 'org-mode-hook 'turn-on-auto-fill)
(setq-default fill-column 80)
   #+end_src

** Babel
   
   I am using a third-party implementation for Racket in =org-babel=
   which can be found on GitHub:
   [[https://github.com/togakangaroo/ob-racket]] For this to work, the
   configuration file must be added to the =load-path=:
   #+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/packages/")
(require 'ob-racket)
   #+end_src

   Enable support for Racket to be executed from Org-mode.
   #+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((racket . t)))
   #+end_src

